# Action Groups Configuration Example
# Copy this to your .env file and update with your values

# === EXISTING BEDROCK CONFIGURATION ===
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your_aws_access_key_id
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key

# Bedrock Knowledge Base (existing)
BEDROCK_KNOWLEDGE_BASE_ID=ABCDEFGHIJ
BEDROCK_S3_BUCKET=your-knowledge-base-bucket
DEFAULT_MODEL_ID=anthropic.claude-3-sonnet-20240229-v1:0

# === ACTION GROUPS CONFIGURATION ===

# Bedrock Agent (required for action groups)
BEDROCK_AGENT_ID=KLMNOPQRST
BEDROCK_AGENT_ALIAS_ID=TSTALIASID

# Service Role for Agent (created when setting up agent)
BEDROCK_AGENT_SERVICE_ROLE=arn:aws:iam::123456789012:role/AmazonBedrockExecutionRoleForAgents_YourAgentName

# Optional: Lambda Configuration
LAMBDA_EXECUTION_ROLE_PREFIX=oralia-action-group-execution-role
LAMBDA_FUNCTION_PREFIX=oralia-action-group

# Optional: Action Group Settings
ACTION_GROUP_TIMEOUT_SECONDS=30
ACTION_GROUP_MEMORY_SIZE_MB=256
ACTION_GROUP_LOG_LEVEL=info

# === API CONFIGURATION STORAGE ===
# For production, consider using DynamoDB for storing API configurations
# ACTION_GROUP_CONFIG_TABLE=action-group-configurations
# ACTION_GROUP_HISTORY_TABLE=action-group-execution-history

# === SECURITY SETTINGS ===
# Enable encryption for sensitive data
ENCRYPT_API_CREDENTIALS=true

# Optional: Secrets Manager for API keys
# AWS_SECRETS_MANAGER_REGION=us-east-1
# API_CREDENTIALS_SECRET_ARN=arn:aws:secretsmanager:us-east-1:123456789012:secret:api-credentials

# === MONITORING AND LOGGING ===
# CloudWatch configuration
ENABLE_CLOUDWATCH_METRICS=true
CLOUDWATCH_NAMESPACE=Oralia/ActionGroups

# Optional: Enable enhanced logging
DEBUG_ACTION_GROUPS=false
LOG_API_REQUESTS=false
LOG_LAMBDA_RESPONSES=false

# === RATE LIMITING ===
# Action group specific rate limits
ACTION_GROUP_RATE_LIMIT_WINDOW_MS=60000
ACTION_GROUP_RATE_LIMIT_MAX_REQUESTS=10

# === DEVELOPMENT SETTINGS ===
# Enable test mode for development
ACTION_GROUP_TEST_MODE=false

# Mock responses for testing
MOCK_LAMBDA_RESPONSES=false

# Validate API endpoints before creating action groups
VALIDATE_API_ENDPOINTS=true

# === FRONTEND CONFIGURATION ===
# API URL for frontend (usually same as main app)
VITE_API_URL=http://localhost:3002/api

# Enable action group features in frontend
VITE_ENABLE_ACTION_GROUPS=true

# === EXAMPLE API CONFIGURATIONS ===
# These are examples - you'll configure actual APIs through the UI

# Example: E-commerce API
# EXAMPLE_ECOMMERCE_API_BASE_URL=https://api.mystore.com
# EXAMPLE_ECOMMERCE_API_KEY=your_ecommerce_api_key

# Example: Support System API
# EXAMPLE_SUPPORT_API_BASE_URL=https://api.helpdesk.com
# EXAMPLE_SUPPORT_API_TOKEN=your_support_api_token

# Example: CRM API
# EXAMPLE_CRM_API_BASE_URL=https://api.crm.com
# EXAMPLE_CRM_API_USERNAME=your_crm_username
# EXAMPLE_CRM_API_PASSWORD=your_crm_password

# === NOTES ===
# 1. Replace all placeholder values with your actual AWS credentials and ARNs
# 2. The BEDROCK_AGENT_ID should be from an existing, configured Bedrock Agent
# 3. Service role ARN can be found in the Bedrock Agent console
# 4. API credentials will be securely stored when you create action groups
# 5. For production, use AWS Secrets Manager for sensitive API credentials